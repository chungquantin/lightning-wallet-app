"""Exposes a URL that specifies the behaviour of this scalar."""
directive @specifiedBy(
  """The URL that specifies the behaviour of this scalar."""
  url: String!
) on SCALAR

type AddNewContact {
  data: String
  errors: [ApiError!]
  success: Boolean!
}

input AddNewContactDto {
  userId: String!
}

type ApiError {
  message: String!
  path: String!
}

type BankAccountAchSchema {
  account: String!
  id: ID!
  routingNumber: String!
  wire_routing: String!
}

type BankAccountBalanceSchema {
  availableBalance: Float
  currentBalance: Float
  id: ID!
  isoCurrencyCode: String
  limitBalance: Float
  unofficialCurrencyCode: String
}

type BankAccountSchema {
  accountId: String!
  ach: BankAccountAchSchema!
  addedAt: String!
  balance: BankAccountBalanceSchema!
  id: ID!
  institution: InstitutionSchema
  name: String!
  officialName: String
  subType: String
  type: BankAccountType!
  userId: String!
}

"""Values of the Bank Account Type field"""
enum BankAccountType {
  Brokerage
  Credit
  Depository
  Investment
  Loan
  Other
}

type BankTransfer {
  account_id: String!
  ach_class: String!
  amount: String!
  cancellable: Boolean!
  created: String!
  currency: String!
  customTag: String!
  description: String!
  direction: String!
  failure_reason: String!
  id: String!
  legalName: String!
  network: String!
  originationAccountId: String!
  status: String!
  type: String!
}

type BtcAddress {
  chainInvoice: ChainInvoiceSchema!
  lightningInvoice: LightningInvoiceSchema!
}

type BtcAddresses {
  chainInvoices: [ChainInvoiceSchema!]!
  lightningInvoices: [LightningInvoiceSchema!]!
}

type CancelPaymentRequest {
  data: String
  errors: [ApiError!]
  success: Boolean!
}

input CancelPaymentRequestDto {
  paymentRequestId: String!
}

type ChainInvoiceSchema {
  address: String!
  createdAt: String!
  id: ID!
  userId: String!
}

type CheckLightningStatus {
  data: LightningStatusResponse
  errors: [ApiError!]
  success: Boolean!
}

input CheckLightningStatusDto {
  userId: String!
}

type CheckOnChainStatus {
  data: OnChainStatusResponse
  errors: [ApiError!]
  success: Boolean!
}

input CheckOnChainStatusDto {
  amount: Float!
  createdAt: Float!
  txFee: Float!
  userId: String!
}

type CheckTransactionStatus {
  data: CheckTransactionStatusResponse
  errors: [ApiError!]
  success: Boolean!
}

input CheckTransactionStatusDto {
  transactionId: String!
}

type CheckTransactionStatusResponse {
  method: String!
  paidAmount: Float!
  status: TransactionStatus!
  transactionId: String!
}

type ConnectBankAccount {
  data: String
  errors: [ApiError!]
  success: Boolean!
}

input ConnectBankAccountDto {
  """account id [Plaid]"""
  accountId: String!
  institutionId: String!
  publicToken: String!
}

type ConnectDebitCard {
  data: String
  errors: [ApiError!]
  success: Boolean!
}

type DeleteBankAccount {
  data: String
  errors: [ApiError!]
  success: Boolean!
}

input DeleteBankAccountDto {
  bankAccountId: String!
}

type Deposit {
  data: String
  errors: [ApiError!]
  success: Boolean!
}

input DepositDto {
  accountName: String!

  """The user's account number."""
  accountNumber: String!

  """The type of the bank account (checking or savings)."""
  accountType: String!
  amount: Float!
  currency: String!

  """The user's routing number."""
  routingNumber: String!
}

input ExchangeTokenDto {
  publicToken: String!
}

"""Fiat currency"""
enum FiatCurrency {
  CAD
  USD
  VND
}

type ForgotPassword {
  data: String
  errors: [ApiError!]
  success: Boolean!
}

input ForgotPasswordChangeDto {
  key: String!
  newPassword: String!
}

type GenerateChainInvoice {
  data: ChainInvoiceSchema
  errors: [ApiError!]
  success: Boolean!
}

type GenerateLightningInvoice {
  data: LightningInvoiceSchema
  errors: [ApiError!]
  success: Boolean!
}

input GenerateLightningInvoiceDto {
  amount: Float!
  currency: String!
  description: String!
}

type GetBankAccount {
  data: BankAccountSchema
  errors: [ApiError!]
  success: Boolean!
}

input GetBankAccountDto {
  bankAccountId: String!
}

type GetBankAccounts {
  data: [BankAccountSchema!]!
  errors: [ApiError!]
  success: Boolean!
}

type GetBankTransfer {
  data: BankTransfer
  errors: [ApiError!]
  success: Boolean!
}

input GetBankTransferDto {
  bankTransferId: String!
}

type GetBankTransfers {
  data: [BankTransfer!]!
  errors: [ApiError!]
  success: Boolean!
}

input GetBankTransfersDto {
  count: Float!
  direction: String!
  endDate: String!
  offset: Float!
  originationAccountId: String!
  startDate: String!
}

type GetBtcAddress {
  data: BtcAddress
  errors: [ApiError!]
  success: Boolean!
}

type GetBtcAddresses {
  data: BtcAddresses
  errors: [ApiError!]
  success: Boolean!
}

type GetChainInvoice {
  data: ChainInvoiceSchema
  errors: [ApiError!]
  success: Boolean!
}

input GetChainInvoiceDto {
  address: String!
}

type GetInstitutionById {
  data: InstitutionSchema
  errors: [ApiError!]
  success: Boolean!
}

input GetInstitutionDto {
  institutionId: String!
}

type GetInstitutions {
  data: [InstitutionSchema!]!
  errors: [ApiError!]
  success: Boolean!
}

type GetLightningInvoice {
  data: LightningInvoiceSchema
  errors: [ApiError!]
  success: Boolean!
}

input GetLightningInvoiceDto {
  paymentRequest: String!
}

type GetMeWallet {
  data: WalletSchema
  errors: [ApiError!]
  success: Boolean!
}

type GetMyBankAccounts {
  data: [BankAccountSchema!]!
  errors: [ApiError!]
  success: Boolean!
}

type GetMyContacts {
  data: [UserSchema!]!
  errors: [ApiError!]
  success: Boolean!
}

type GetMyPaymentRequests {
  data: [TransactionRequestSchema!]!
  errors: [ApiError!]
  success: Boolean!
}

type GetMyWalletTransactions {
  data: [TransactionSchema!]!
  errors: [ApiError!]
  success: Boolean!
}

type GetNodeTransactions {
  data: [LightningTransaction!]!
  errors: [ApiError!]
  success: Boolean!
}

type GetPaymentRequest {
  data: TransactionRequestSchema
  errors: [ApiError!]
  success: Boolean!
}

input GetPaymentRequestDto {
  paymentRequestId: String!
}

type GetPaymentRequests {
  data: [TransactionRequestSchema!]!
  errors: [ApiError!]
  success: Boolean!
}

type GetTransaction {
  data: TransactionSchema
  errors: [ApiError!]
  success: Boolean!
}

input GetTransactionDto {
  transactionId: String!
}

type GetTransactions {
  data: [TransactionSchema!]!
  errors: [ApiError!]
  success: Boolean!
}

type GetUser {
  data: UserSchema
  errors: [ApiError!]
  success: Boolean!
}

input GetUserDto {
  userId: String!
}

type GetUsers {
  data: [UserSchema!]!
  errors: [ApiError!]
  success: Boolean!
}

type GetWallet {
  data: WalletSchema
  errors: [ApiError!]
  success: Boolean!
}

input GetWalletDto {
  userId: String = ""
  walletId: String = ""
}

type GetWallets {
  data: [WalletSchema!]!
  errors: [ApiError!]
  success: Boolean!
}

type InstitutionSchema {
  id: ID!
  institutionId: String!
  institutionLogo: String
  institutionName: String!
  primaryColor: String
  websiteUrl: String
}

type LightningInvoiceSchema {
  addIndex: Float!
  createdAt: String!
  expiresAt: String!
  id: ID!
  payReq: String!
  rHash: String!
  userId: String!
}

type LightningStatusResponse {
  amtPaid: Float!
  amtPaidMsat: Float!
  amtPaidSat: Float!
  cltvExpiry: Float!
  creationDate: Float!
  memo: String!
  paymentRequest: String!
  rHash: String!
  settleDate: Float!
  settled: Boolean!
  value: Float!
}

type LightningTransaction {
  amount: Float!
  blockHash: String!
  fees: Float!
  hash: String!
  timeStamp: Float!
}

type LinkTokenCreateResponseImpl {
  expiration: String!
  link_token: String!
  request_id: String!
}

type Login {
  data: TokenResponse
  errors: [ApiError!]
  success: Boolean!
}

input LoginDto {
  email: String!
  password: String!
}

type Logout {
  data: String
  errors: [ApiError!]
  success: Boolean!
}

type LookupLightningInvoice {
  data: LightningStatusResponse
  errors: [ApiError!]
  success: Boolean!
}

input LookupLightningInvoiceDto {
  rHash: String!
}

type LookupOnchainTransaction {
  data: [OnchainTransaction!]!
  errors: [ApiError!]
  success: Boolean!
}

input LookupOnChainTransactionDto {
  address: String!
}

type Me {
  data: UserSchema
  errors: [ApiError!]
  success: Boolean!
}

type Mutation {
  addNewContact(data: AddNewContactDto!): AddNewContact
  cancelPaymentRequest(data: CancelPaymentRequestDto!): CancelPaymentRequest
  checkTransactionStatus(data: CheckTransactionStatusDto!): CheckTransactionStatus
  connectBankAccount(data: ConnectBankAccountDto!): ConnectBankAccount
  connectDebitCard: ConnectDebitCard
  createLinkToken: PlaidCreateLinkToken
  deleteBankAccount(data: DeleteBankAccountDto!): DeleteBankAccount
  deposit(data: DepositDto!): Deposit
  forgotPasswordChange(data: ForgotPasswordChangeDto!): SendForgotPassword
  generateLightningInvoice(data: GenerateLightningInvoiceDto!): GenerateLightningInvoice
  generateOnChainInvoice: GenerateChainInvoice
  login(data: LoginDto!): Login
  logout: Logout
  register(data: RegisterDto!): Register
  respondPaymentRequest(data: RespondPaymentRequestDto!): RespondPaymentRequest
  sendForgotPasswordEmail(data: SendForgotPasswordDto!): ForgotPassword
  sendInAppPayment(data: SendInAppPaymentDto!): SendInAppPayment
  sendLightningPayment(data: SendLightningPaymentDto!): SendLightningPayment
  sendOnchainPayment(data: SendOnchainPaymentDto!): SendOnchainPayment
  sendPaymentRequest(data: SendRequestPaymentDto!): SendPaymentRequest
  withdraw(data: WithdrawDto!): Withdraw
}

type OnChainStatusResponse {
  amount: Float!
  status: TransactionStatus!
  timeStamp: Float!
  txHash: String!
}

type OnchainTransaction {
  amount: Float!
  blockHash: String!
  blockHeight: Float!
  destAddresses: [String!]!
  label: String!
  numConfirmations: Float!
  rawTxHex: String!
  timeStamp: Float!
  totalFees: Float!
  txHash: String!
}

input PaginationInputType {
  limit: Int = 0
  skip: Int = 0
}

type PlaidCreateLinkToken {
  data: LinkTokenCreateResponseImpl
  errors: [ApiError!]
  success: Boolean!
}

type PlaidExchangePublicToken {
  data: String
  errors: [ApiError!]
  success: Boolean!
}

type Query {
  checkLightningStatus(data: CheckLightningStatusDto!): CheckLightningStatus
  checkOnChainStatus(data: CheckOnChainStatusDto!): CheckOnChainStatus
  exchangePublicToken(data: ExchangeTokenDto!): PlaidExchangePublicToken
  getBankAccount(data: GetBankAccountDto!): GetBankAccount
  getBankAccounts: GetBankAccounts
  getBankTransfer(data: GetBankTransferDto!): GetBankTransfer
  getBankTransfers(data: GetBankTransfersDto!): GetBankTransfers
  getBtcAddresses: GetBtcAddresses
  getChainInvoice(data: GetChainInvoiceDto!): GetChainInvoice
  getCurrentUser: Me
  getInstitution(data: GetInstitutionDto!): GetInstitutionById
  getInstitutions: GetInstitutions
  getLightningInvoice(data: GetLightningInvoiceDto!): GetLightningInvoice
  getMyBankAccounts: GetMyBankAccounts
  getMyBtcAddress: GetBtcAddress
  getMyContacts(Pagination: PaginationInputType): GetMyContacts
  getMyPaymentRequests(Pagination: PaginationInputType): GetMyPaymentRequests
  getMyWallet: GetMeWallet
  getMyWalletTransactions(Pagination: PaginationInputType): GetMyWalletTransactions
  getNodeTransactions(Pagination: PaginationInputType): GetNodeTransactions
  getPaymentRequest(data: GetPaymentRequestDto!): GetPaymentRequest
  getPaymentRequests(Pagination: PaginationInputType): GetPaymentRequests
  getTransaction(data: GetTransactionDto!): GetTransaction
  getTransactions(Pagination: PaginationInputType): GetTransactions
  getUser(data: GetUserDto!): GetUser
  getUsers(Pagination: PaginationInputType): GetUsers
  getWallet(data: GetWalletDto!): GetWallet
  getWallets(Pagination: PaginationInputType): GetWallets
  lookupLightningInvoice(data: LookupLightningInvoiceDto!): LookupLightningInvoice
  lookupOnchainTransaction(data: LookupOnChainTransactionDto!): LookupOnchainTransaction
  searchUser(data: SearchUserDto!): SearchUser
}

type Register {
  data: UserSchema
  errors: [ApiError!]
  success: Boolean!
}

input RegisterDto {
  avatar: String!
  email: String!
  firstName: String!
  lastName: String!
  password: String!
  phoneNumber: String!
  username: String!
}

type RespondPaymentRequest {
  data: Boolean
  errors: [ApiError!]
  success: Boolean!
}

input RespondPaymentRequestDto {
  confirmed: Boolean!
  paymentRequestId: String!
}

type SearchUser {
  data: UserSchema
  errors: [ApiError!]
  success: Boolean!
}

input SearchUserDto {
  searchInput: String!
}

type SendForgotPassword {
  data: String
  errors: [ApiError!]
  success: Boolean!
}

input SendForgotPasswordDto {
  email: String!
}

type SendInAppPayment {
  data: TransactionSchema
  errors: [ApiError!]
  success: Boolean!
}

input SendInAppPaymentDto {
  amount: Float!
  currency: String!
  description: String!
  method: String!
  walletId: String
}

type SendLightningPayment {
  data: TransactionSchema
  errors: [ApiError!]
  success: Boolean!
}

input SendLightningPaymentDto {
  paymentRequest: String!
}

type SendOnchainPayment {
  data: TransactionSchema
  errors: [ApiError!]
  success: Boolean!
}

input SendOnchainPaymentDto {
  """Bitcoin Address"""
  address: String!

  """Bitcoin Amount"""
  amount: Float!
  description: String!
}

type SendPaymentRequest {
  data: TransactionRequestSchema
  errors: [ApiError!]
  success: Boolean!
}

input SendRequestPaymentDto {
  amount: Float!
  currency: String!
  description: String!
  method: String!
  walletId: String!
}

type TokenResponse {
  accessToken: String!
  refreshToken: String!
}

"""Transaction method"""
enum TransactionMethod {
  DEPOSIT
  LIGHTNING
  ON_CHAIN
  OTHER
  WITHDRAW
}

type TransactionRequestSchema {
  createdAt: String!
  expiredAt: String!
  id: ID!
  requestFrom: String!
  requestTo: String!
  settledAt: String
  status: TransactionRequestStatus!
  transaction: TransactionSchema!
}

"""Transaction request status"""
enum TransactionRequestStatus {
  CANCELED
  CONFIRMED
  PENDING
  REJECTED
  UNKNOWN
}

type TransactionSchema {
  amount: Float!
  amountLessFee: Float!
  btcAmount: Float!
  btcExchangeRate: Float!
  createdAt: String!
  currency: FiatCurrency!
  description: String!
  fromWalletId: String!
  id: ID!
  method: TransactionMethod!
  networkFee: Float!
  paidAmount: Float!
  settledAt: String
  status: TransactionStatus!
  toWalletId: String!
  transactionFee: Float!
}

"""Transaction status"""
enum TransactionStatus {
  EXPIRED
  PAID
  PARTIALLY_PAID
  PENDING
  UNPAID
}

type UserSchema {
  avatar: String!
  contacts: [UserSchema!]!
  createdAt: String!
  email: String!
  emailVerified: Boolean!
  firstName: String!
  forgotPasswordLock: Boolean!
  id: ID!
  lastName: String!
  name: String!
  phoneNumber: String!
  phoneNumberVerified: Boolean!
  twoFactorVerified: Boolean!
  username: String!
}

type WalletSchema {
  balance: Float!
  createdAt: String!
  defaultCurrency: FiatCurrency!
  id: ID!
  transactions: [TransactionSchema!]!
  userId: ID!
}

type Withdraw {
  data: String
  errors: [ApiError!]
  success: Boolean!
}

input WithdrawDto {
  accountName: String!

  """The user's account number."""
  accountNumber: String!

  """The type of the bank account (checking or savings)."""
  accountType: String!
  amount: Float!
  currency: String!

  """The user's routing number."""
  routingNumber: String!
}

